# This is an aspirational GalSim config file to reproduce what imSim does for e.g. DC2.
# Most of the modules here involve code that already exists in imSim, but would need a slight
# refactoring to use the GalSim config API for the function names and data flow.


# This tells GalSim which things to import to register extra config types
# Mostly we need the imsim repo.  But could add others here as well.
# E.g. galsim_extra has some useful routines we might want to use.  (But I don't here.)
modules:
    - desc.imsim     # Will have the custom ImSim modules.

# Anything set here can be used in any Eval (usually a string that starts with $) as a variable.
# This is often convenient, so they can be set just once (probably from the command line) and
# used in multiple places.
eval_variables:
    srun: 0001

    # Can set the output dir via environment variable if you want, or can set this on the
    # command line via:
    #
    #     galsim imsim.yaml eval_variables.simage_dir=/some/other/output/dir
    #
    #simage_dir: $os.environ.get('IMSIM_IMAGE_PATH')
    simage_dir: output # For testing, this is more convenient.

    # Note: At nersc, this is:
    #   /cvmfs/sw.lsst.eu/linux-x86_64/lsst_sims/sims_w_2020_28/stack/current/Linux64/sims_sed_library/2017.01.24-1-g5b328a8
    #
    #ssed_dir: $os.environ.get('SIMS_SED_LIBRARY_DIR')
    ssed_dir: /Users/Mike/Astro/lsst/imsim/sims_sed_library_dir

    # Probably would set this on the command line, but for now, here is where the instance
    # catalog lives on my computer.
    #
    # Note: At nersc, this is at:
    #   /global/cscratch1/sd/jchiang8/desc/Run2.2i/InstCats/00466749
    #
    # The .100 is a version I made with only 100 objects per file.
    # And .star and .disk only run the stars and disk galaxies respectively.
    #
    #scat_name: /Users/Mike/Astro/lsst/imsim/00466749/phosim_cat_466749.txt
    #scat_name: /Users/Mike/Astro/lsst/imsim/00466749/phosim_cat_466749.100
    scat_name: /Users/Mike/Astro/lsst/imsim/00466749/phosim_cat_466749.star
    #scat_name: /Users/Mike/Astro/lsst/imsim/00466749/phosim_cat_466749.disk

    # Likewise, this could be set on the command line, or maybe just generated automatically.
    spsf_name: /Users/Mike/Astro/lsst/imsim/00466749/psf_save.fits

# Any input data is set here.  These are read in at the start of the program and potentially
# updated for each output file.
# Also includes things that need some set up at the start of an exposure, like the atmospheric PSF.
input:
    instance_catalog:
        # This enables InstCat types
        file_name: $cat_name
        sed_dir: $sed_dir

    opsim_meta_dict:
        # This enables OpsimMeta types
        # Note: These could have been just a single input object, since they both read in the same
        # input file.  But it's useful to separate them, since we want some OpsimMeta items at
        # file scope.  In particular to define the WCS, which is needed by the InstCat items.
        # So this one is registered as being allowed at file scope, but instance_catalog is not.
        file_name: $cat_name

    tree_rings:
        # This enables TreeRingCenter and TreeRungFunc, which are stored as a dict here based
        # on the detector name, so the right value can be accessed for each object.
        # This file lives in the imsim repo.
        file_name: ../data/tree_ring_data/tree_ring_parameters_2018-04-26.txt
        # Can limit the detectors to read in.  This is handy while debugging, since it takes
        # a minute or so to read all 189 detectors.
        only_dets: [R01-S01]

    # TODO
    #atm_psf:
        # This enables the Atmospheric type for the PSF
        #airmass: { type: OpsimMeta, field: airmass }
        #rawSeeing:  { type: OpsimMeta, field: airmass }
        #band:  { type: OpsimMeta, field: airmass }
        #save_file: $psf_file  # This is currently set of the imsim command line, so we could keep
                              # doing that, but we could also base this name off of
                              # input.instance_catalog.file_name, or even just have `save: True`
                              # and let the atm_psf figure out a unique name from the input params.

# Define how the objects are placed on the image.  This refers to a single CCD.
image:
    type: Scattered

    random_seed: { type: OpsimMeta, field: seed }
    nproc: -1  # Use as many processes as possible.  Can be a specific number if preferred.
    xsize: 4096
    ysize: 4096

    bandpass: { type: OpsimMetaBandpass }

    wcs:
        # TODO: We'll need to replace this.
        #       For now, I have a dict of the WCS's from the DC2 calexps for this exposure.
        #       At nersc, this is at:
        #           /global/cscratch1/sd/mjarvis/DC2/wcs_466749.yaml
        type: Dict
        file_name: /Users/Mike/Astro/lsst/imsim/00466749/wcs_466749.yaml
        key: "$(@output.file_name).replace('raw','calexp')"

    noise:
        type: CCD
        gain: 1
        read_noise: 0  # The read noise is applied later.  Only sky noise here.

    # TODO: Port the skyModel code from imsim  (Currently uses lsst.sims)
    sky_level: 5000000  # ADU / arcsec**2

    use_flux_sky_areas: False   # This is the default.  But set to true to get BF in sky.
                                # TODO: this is a one step flux calculation, so it's not
                                # yet right for doing flats.

    sensor:
        type: Silicon
        strength: 1.0
        # index_key just tells GalSim that this only changes with a new image num.
        treering_center: { type: TreeRingCenter, det_name: $det_name, index_key: image_num }
        treering_func: { type: TreeRingFunc, det_name: $det_name, index_key: image_num }
        transpose: True


# Define the PSF to use in the normal case (LSST_Silicon will override if doing a saturated star)
psf:
    # TODO
    #type: Atmospheric
    #x: $image_pos.x
    #y: $image_pos.y
    type: Moffat   # Placeholder
    beta: 3.5
    fwhm: 0.7

# Define the galaxy (or delta function) to use
gal:
    type: InstCatObj

# This is where most of the code from GalsimSiliconInterpreter will go.
stamp:
    type: LSST_Silicon

    fft_sb_thresh: 2.e5  # When to switch to fft and a simpler PSF and skip silicon
    max_flux_simple: 100  # When to switch to simple SED

    sed:
        type: InstCatSED

    world_pos:
        type: InstCatWorldPos

    photon_ops:
        -
            type: FRatioAngles
            fratio: 1.234
            obscuration: 0.606
        -
            type: WavelengthSampler
            sed: "@stamp.sed"
        -
            type: PhotonDCR
            base_wavelength: $bandpass.effective_wavelength
            latitude: -30.24463 degrees
            HA:
                type: Degrees
                theta: { type: OpsimMeta, field: HA }
        -
            # Note: If FocusDepth is before Refraction, then the depth is the amount of focus
            #       change required relative to the rays coming to a focus at the surface.
            #       If FocusDepth is after Refraction, then the depth is the actual depth in
            #       the silicon where the (refracted) rays come to a focus.
            type: FocusDepth
            depth:
                type: Eval
                str: depth_dict[band]
                # TODO: Figure out the depth to use for other bands.  Josh found -0.6 for y.
                # These numbers are in units of pixels.
                ddepth_dict: {'u':0, 'g':0, 'r':0, 'i':0, 'z':0, 'y':-0.6}
                sband: { type: OpsimMeta, field: bandpass }
        -
            type: Refraction
            index_ratio: 3.9  # TODO: This is what Josh used for y band.
                              # I assume it's wavelength dependent...
                              # Probably need to use the same kind of pattern as above for depth.


# This defines both the output files and some basic things about the overall exposure/fov.
output:
    type: LSST_CCD
    nproc: 1    # Change this to work on multiple CCDs at once.
    nfiles: 1   # Default is all 189 CCDs.  Set to 1 while testing.

    exp_time: 30

    det_num:
        type: Sequence
        nitems: 189
        first: 1   # Can set first to something if you want to do a specific sensor.

    dir: $image_dir
    file_name:
        type: FormattedStr
        format : raw_%08d-%s-%s-det%03d.fits
        items:
            - { type: OpsimMeta, field: obshistid }
            - { type: OpsimMeta, field: bandpass }
            - "$det_name"   # A value stored in the dict by LSST_CCD
            - "@output.det_num"

    # TODO: Not implemented yet.
    checkpoint:
        nobj: 500
        cleanup: True

    # TODO: Not implemented yet.
    cosmic_rays:
        ccd_rate: 0.2    # CTIO rate extracted from DECam darks.
        catalog: default

    # TODO
    readout:
        # Convert from e-image to realized image from readout chain.
        readout_time: 3.
        dark_current: 0.02
        bias_level: 1000.
        pcti: 1.e-6
        scti: 1.e-6

    truth:
        dir: output
        file_name:
            type: FormattedStr
            format : centroid_%08d-%s-%s-det%03d.txt.gz
            items:
                - { type: OpsimMeta, field: obshistid }
                - { type: OpsimMeta, field: bandpass }
                - "$det_name"
                - "@output.det_num"
        columns:
            ra: "$sky_pos.ra.deg"
            dec: "$sky_pos.dec.deg"
            x: "$image_pos.x"
            y: "$image_pos.y"
            flux: "$(@current_prof).flux"
            # ... more probably
